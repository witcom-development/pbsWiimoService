<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:util="http://www.springframework.org/schema/util"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
						   http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
						   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
						   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<util:properties id="databaseProps" location="classpath:config/properties/database.xml"/>

	<bean id="dataSource" class="org.fincl.miss.server.util.DecodeDataSource">
		<property name="driverClassName" value="#{databaseProps.driverClassName}"/>
		<property name="url" value="#{databaseProps.url}"/>
		<property name="username" value="#{databaseProps.username}"/>
		<property name="password" value="#{databaseProps.password}"/>
		<property name="initialSize" value="20"/>
		<property name="maxActive" value="100"/>
		<property name="minIdle" value="20"/>
		<property name="testOnBorrow" value="true"/>
		<property name="testWhileIdle" value="true"/>
		<!-- property name="validationQuery" value="SELECT 1 FROM DUAL"/ -->
		<property name="timeBetweenEvictionRunsMillis" value="60000"/>
		<property name="minEvictableIdleTimeMillis" value="300000"/>
	</bean>

	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="classpath:config/mybatis/mybatis-config.xml"/>
		<property name="mapperLocations">
			<array>
   				<value>classpath:config/mybatis/sql/server/*.xml</value>
   				<value>classpath:config/mybatis/sql/telegram/*.xml</value>
   				<value>classpath:config/mybatis/sql/code2/*.xml</value>
   				<value>classpath:config/mybatis/sql/scheduler/*.xml</value>
   				<value>classpath:config/mybatis/sql/service/*.xml</value>
   				<value>classpath:config/mybatis/sql/logInfo/*.xml</value>
   				<value>classpath:config/mybatis/sql/userLog/*.xml</value>
   				<value>classpath:config/mybatis/sql/scheduler/*.xml</value>
  			</array>
		</property>
	</bean>

	<bean id="mapperScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="org.fincl.miss"/>
		<property name="annotationClass" value="egovframework.rte.psl.dataaccess.mapper.Mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSession"/>
	</bean>
	
	<!--
	timeout - 제한시간 (기본값 : -1)
	read-only - 읽기전용 (기본값 : false)
	rollback-for - 예외처리 (기본값 :  RuntimeException)
	no-rollback-for - 예외처리 (기본값 : 없음)

	[PROPAGATION:전파옵션] - 기본값 : REQUIRED
	REQUIRED : 이미 tx가 존재할 경우, 해당 tx에 참여 / tx가 없을 경우, 신규 tx를 생성하고 실행
	SUPPORTS : 이미 tx가 존재할 경우, 해당 tx에 참여 / tx가 없을 경우, 그냥 실행
	MANDATORY : 이미 tx가 존재할 경우, 해당 tx에 참여 / tx가 없을 경우, Exception 발생
	REQUIRES_NEW : 이미 tx가 존재할 경우, 해당 tx를 suspend 시키고&nbsp;신규 tx를 생성 / tx가 없을 경우, 신규 tx를 생성
	NOT_SUPPORTED : 이미 tx가 존재할 경우, 해당 tx를 suspend 시키고 tx 없이 실행 / tx가 없을 경우, 그냥 실행
	NEVER&nbsp;: 이미 tx가 존재할 경우, Exception 발생 / tx가 없을 경우, tx 없이 실행
	NESTED : 이미 tx가 존재할 경우, 해당 tx에 참여 / tx가 없을 경우, nested tx 실행

	[ISOLATION:격리수준] - 기본값 : DEFAULT
	DEFAULT : datastore에 의존
	READ_UNCOMMITED : Dirty Reads, Non-Repeatable Reads, Phantom Reads 발생
	READ_COMMITED : Dirty Reads 방지, Non-Repeatable Reads, Phantom Reads 발생
	REPEATABLE_READ : Non-Repeatable Read 방지, Phantom Reads 발생
	SERIALIZABLE : Phantom Read 방지 
	-->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="add*" rollback-for="Exception"/>
			<tx:method name="set*"  rollback-for="Exception"/>
			<tx:method name="insert*" rollback-for="Exception"/>
			<tx:method name="modify*" rollback-for="Exception"/>
			<tx:method name="update*" rollback-for="Exception"/>
			<tx:method name="change*" rollback-for="Exception"/>
			<tx:method name="delete*" rollback-for="Exception"/>
			<tx:method name="remove*" rollback-for="Exception"/>
			<tx:method name="init*" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>

	<aop:config proxy-target-class="true">
		<aop:pointcut id="txPointCut" expression="execution(* org.fincl.miss..*ServiceImpl.*(..))"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
	</aop:config>

</beans>
